// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens(user_id, token, created_at, updated_at, is_revoked, expires_at)
VALUES (?, ?, ?, ?, 0, ?)
`

type CreateRefreshTokenParams struct {
	UserID    string
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ExpiresAt,
	)
	return err
}

const getValidRefreshTokenByValue = `-- name: GetValidRefreshTokenByValue :one
SELECT user_id, token, created_at, updated_at, is_revoked, expires_at FROM refresh_tokens WHERE is_revoked = 0 AND token = ? AND expires_at > ?
`

type GetValidRefreshTokenByValueParams struct {
	Token     string
	ExpiresAt time.Time
}

func (q *Queries) GetValidRefreshTokenByValue(ctx context.Context, arg GetValidRefreshTokenByValueParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getValidRefreshTokenByValue, arg.Token, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRevoked,
		&i.ExpiresAt,
	)
	return i, err
}

const getValidRefreshTokenForUserId = `-- name: GetValidRefreshTokenForUserId :one
SELECT user_id, token, created_at, updated_at, is_revoked, expires_at FROM refresh_tokens WHERE is_revoked = 0 AND expires_at > ? AND user_id = ?
`

type GetValidRefreshTokenForUserIdParams struct {
	ExpiresAt time.Time
	UserID    string
}

func (q *Queries) GetValidRefreshTokenForUserId(ctx context.Context, arg GetValidRefreshTokenForUserIdParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getValidRefreshTokenForUserId, arg.ExpiresAt, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsRevoked,
		&i.ExpiresAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET is_revoked = 1 WHERE user_id = ?
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, userID string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, userID)
	return err
}
