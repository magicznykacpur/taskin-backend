// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const addAdminPrivilages = `-- name: AddAdminPrivilages :one
UPDATE users SET is_admin = TRUE, updated_at = ? WHERE id = ? RETURNING id, created_at, updated_at, email, username, hashed_password, is_admin
`

type AddAdminPrivilagesParams struct {
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) AddAdminPrivilages(ctx context.Context, arg AddAdminPrivilagesParams) (User, error) {
	row := q.db.QueryRowContext(ctx, addAdminPrivilages, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users(id, created_at, updated_at, email, username, hashed_password)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID             string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	Username       string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, email, username, hashed_password, is_admin FROM users WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, updated_at, email, username, hashed_password, is_admin FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, email, username, hashed_password, is_admin FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.Username,
			&i.HashedPassword,
			&i.IsAdmin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAdminPrivilages = `-- name: RevokeAdminPrivilages :one
UPDATE users SET is_admin = FALSE, updated_at = ? WHERE id = ? RETURNING id, created_at, updated_at, email, username, hashed_password, is_admin
`

type RevokeAdminPrivilagesParams struct {
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) RevokeAdminPrivilages(ctx context.Context, arg RevokeAdminPrivilagesParams) (User, error) {
	row := q.db.QueryRowContext(ctx, revokeAdminPrivilages, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET email = ?, username = ?, hashed_password = ?, updated_at = ?
WHERE id = ?
RETURNING id, created_at, updated_at, email, username, hashed_password, is_admin
`

type UpdateUserByIDParams struct {
	Email          string
	Username       string
	HashedPassword string
	UpdatedAt      time.Time
	ID             string
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByID,
		arg.Email,
		arg.Username,
		arg.HashedPassword,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Username,
		&i.HashedPassword,
		&i.IsAdmin,
	)
	return i, err
}
