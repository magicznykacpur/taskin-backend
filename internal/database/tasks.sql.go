// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package database

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks(id, created_at, updated_at, title, description, priority, category, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, created_at, updated_at, title, description, priority, category, user_id
`

type CreateTaskParams struct {
	ID          string
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Priority    int64
	Category    string
	UserID      string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.Category,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Category,
		&i.UserID,
	)
	return i, err
}

const deleteTaskByID = `-- name: DeleteTaskByID :exec
DELETE FROM tasks WHERE id = ?
`

func (q *Queries) DeleteTaskByID(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTaskByID, id)
	return err
}

const getAllUsersTasks = `-- name: GetAllUsersTasks :many
SELECT id, created_at, updated_at, title, description, priority, category, user_id FROM tasks WHERE user_id = ?
`

func (q *Queries) GetAllUsersTasks(ctx context.Context, userID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsersTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.Priority,
			&i.Category,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByDescription = `-- name: GetTaskByDescription :one
SELECT id, created_at, updated_at, title, description, priority, category, user_id FROM tasks WHERE UPPER(description) LIKE '%?%'
`

func (q *Queries) GetTaskByDescription(ctx context.Context) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByDescription)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Category,
		&i.UserID,
	)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, created_at, updated_at, title, description, priority, category, user_id FROM tasks WHERE id = ?
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Category,
		&i.UserID,
	)
	return i, err
}

const getTaskByTitle = `-- name: GetTaskByTitle :one
SELECT id, created_at, updated_at, title, description, priority, category, user_id FROM tasks WHERE UPPER(title) LIKE '%?%'
`

func (q *Queries) GetTaskByTitle(ctx context.Context) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByTitle)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Category,
		&i.UserID,
	)
	return i, err
}

const updateTaskByID = `-- name: UpdateTaskByID :one
UPDATE tasks
SET title = ?, description = ?, priority = ?, category = ?, updated_at = ?
WHERE id = ?
RETURNING id, created_at, updated_at, title, description, priority, category, user_id
`

type UpdateTaskByIDParams struct {
	Title       string
	Description string
	Priority    int64
	Category    string
	UpdatedAt   time.Time
	ID          string
}

func (q *Queries) UpdateTaskByID(ctx context.Context, arg UpdateTaskByIDParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskByID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.Category,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Priority,
		&i.Category,
		&i.UserID,
	)
	return i, err
}
